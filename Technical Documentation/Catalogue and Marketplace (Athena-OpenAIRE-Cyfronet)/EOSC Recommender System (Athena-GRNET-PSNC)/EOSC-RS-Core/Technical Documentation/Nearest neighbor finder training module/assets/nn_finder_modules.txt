title Nearest Neighbor Finder pipeline

participant "API\nOnline ML Engine" as online

box "Neighbor search"
  participant "API\nNN Finder" as nn_finder
  participant "Shared volume \n''app/indexers/''" as shared_volume
  participant "API\nNN Finder Downloader" as downloader
end box

box "HDFS"
database "File storage" as hdfs
end box

box "Index training"
  participant "API\nNN Finder Training Module" as train_index
  queue "Redis/RabbitMQ" as rabbit
  participant "Celery worker" as celery
end box

box "PostgreSQL"
database "Metadata" as metadata_storage
database "Embeddings" as embeddings
end box


group Train indexes
  loop Train index for each table
    train_index->celery: 1. Train index \n- table_name
    celery->metadata_storage: 2. Get current metadata \n- table_name
    metadata_storage->celery: 3. Return metadata\n- row_count\n- db_table_name
    
    group Create Indexer object
      note over celery: Save timestamp
      note over celery: Create empty index \nof size table_size
    end
    
    loop Batch training
            celery->embeddings: 4. Select batch of embeddings \n- db_table_name
            embeddings->celery: 5. Resource embeddings batch
            note over celery: Train index 
        end
    celery-->hdfs: 6. Save created indexer \nas indexer_stamped_name \n- Indexer
  end
end

group NN Finder Startup
  group Update indexes
  nn_finder->downloader: 1. Request index download \n- table_names
  loop Update index of each table
      downloader->hdfs: 2. List indexer files of table \n- table_name
      hdfs->downloader: 3. List of timestamped filenames \n- indexer_stamped_names
      note over downloader: Select name of \n- latest indexer
      downloader-->hdfs: 4. Download latest index \n- indexer_stamped_name
      hdfs-->downloader: 5. Indexer
      downloader-->shared_volume: 6. Indexer
      end
    downloader->nn_finder: 7. Notify of new indexes for tables\n- table_names
    loop Load downloaded indexes
      shared_volume-->nn_finder: 8. Indexer
    end
  end
  
  group Download relations graph
    nn_finder->hdfs: 1. Download graph dictionary files  \n- graph_hdfs_path
    hdfs-->nn_finder: 2 Graph dictionary files
  end
end

group Search for neighbors\nby IDs
online->nn_finder: 1. Get nearest neighbors\n- number of  neighbors,\n- context resources ID list 
note over nn_finder: Map IDs to internal index\nand then to object embeddings
note over nn_finder: Search by embeddings
note over nn_finder: Map results in internal index to IDs
nn_finder->online: 2. Nearest neighbors IDs \n(and optionally embeddings)
end

group Search for nearest neighbors\nby embeddings
online->nn_finder: 1. Get nearest neighbors\n- number of neighbors,\n- context embeddings list 
note over nn_finder: Search by embeddings
note over nn_finder: Map results in internal index to IDs
nn_finder->online: 2. nearest neighbors IDs\n(and optionally embeddings)
end

group Search for direct neighbors \nfrom relations graph
online->nn_finder: 1. Get neighbors from graph\n- number of neighbors,\n- context resources ID list 
note over nn_finder: Find neighbors in graph dictionary
nn_finder->online: 2. Neighbors IDs\n
end

@enduml
